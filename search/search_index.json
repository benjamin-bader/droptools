{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Droptools Useful Dropwizard addons, including dropwizard-jooq and dropwizard-redis . dropwizard-jooq A bundle that adds support for relational database access via the excellent jOOQ library. dropwizard-redis A bundle that manages a redis connection pool and makes Jedis clients available to resource methods, without the hassle of pooling logic in your code. Support Please file bug reports and feature requests in GitHub issues . License Copyright 2014-2019 Benjamin Bader This library is licensed under the Apache License, Version 2.0. See http://www.apache.org/licenses/LICENSE-2.0.html or the LICENSE file in this repository for the full license text.","title":"Overview"},{"location":"#droptools","text":"Useful Dropwizard addons, including dropwizard-jooq and dropwizard-redis .","title":"Droptools"},{"location":"#dropwizard-jooq","text":"A bundle that adds support for relational database access via the excellent jOOQ library.","title":"dropwizard-jooq"},{"location":"#dropwizard-redis","text":"A bundle that manages a redis connection pool and makes Jedis clients available to resource methods, without the hassle of pooling logic in your code.","title":"dropwizard-redis"},{"location":"#support","text":"Please file bug reports and feature requests in GitHub issues .","title":"Support"},{"location":"#license","text":"Copyright 2014-2019 Benjamin Bader This library is licensed under the Apache License, Version 2.0. See http://www.apache.org/licenses/LICENSE-2.0.html or the LICENSE file in this repository for the full license text.","title":"License"},{"location":"jooq/","text":"Dropwizard jOOQ Bundle An addon bundle in the vein of dropwizard-hibernate for using the excellent jOOQ SQL library in Dropwizard applications. Dependency Info dependency groupId com.bendb.dropwizard /groupId artifactId dropwizard-jooq /artifactId version 1.3.5-1 /version /dependency Usage Add a JooqBundle to your Application class. @Override public void initialize ( Bootstrap MyConfiguration bootstrap ) { // ... bootstrap . addBundle ( new JooqBundle AppConfig () { @Override public DataSourceFactory getDataSourceFactory ( AppConfig configuration ) { return configuration . getDataSourceFactory (); } @Override public JooqFactory getJooqFactory ( AppConfig configuration ) { return configuration . getJooqFactory (); } }); } This will enable @Context injection of jOOQ Configuration and DSLContext parameters in resource methods: @GET @Path ( /posts/{id} ) public BlogPost getPost ( @QueryParam ( id ) int postId , @Context DSLContext database ) { BlogPostRecord post = database . selectFrom ( POST ) . where ( POST . ID . equal ( postId )) . fetchOne (); // do stuff } This will also enable database healthchecks and install exception mappers. Finally, because I 3 postgres and jOOQ can lag behind some of its features, PostgresSupport provides a few helpers for aggregating array values in queries. For example (taken from the sample project): import static com.bendb.dropwizard.jooq.PostgresSupport.arrayAgg ; database . select ( BLOG_POST . ID , BLOG_POST . BODY , BLOG_POST . CREATED_AT , arrayAgg ( POST_TAG . TAG_NAME )) . from ( BLOG_POST ) . leftOuterJoin ( POST_TAG ) . on ( BLOG_POST . ID . equal ( POST_TAG . POST_ID )) . where ( BLOG_POST . ID . equal ( id . get ())) . groupBy ( BLOG_POST . ID , BLOG_POST . BODY , BLOG_POST . CREATED_AT ) . fetchOne (); Code Generation dropwizard-jooq provides some classes for making generated pojos, DAOs, etc. more convenient to use. JodaDateTimeConverter can be used to map between java.sql.Timestamp and Joda DateTime objects. This is currently the only converter bundled; contributions in this area are welcome! Configuration dropwizard-jooq uses the same DataSourceFactory for configuring its DataSource . For modifying jOOQ configuration settings, there is JooqFactory : jooq : # The flavor of SQL to generate. If not specified, it will be inferred from the JDBC connection URL. (default: null) dialect : POSTGRES # DEPRECATED: Use `executeLogging` instead (default: no) logExecutedSql : yes # Whether to include schema names in generated SQL. (default: yes) renderSchema : yes # How names should be rendered in generated SQL. One of QUOTED, AS_IS, LOWER, or UPPER. (default: QUOTED) renderNameStyle : QUOTED # How keywords should be rendered in generated SQL. One of LOWER, UPPER. (default: UPPER) renderKeywordStyle : LOWER # Whether generated SQL should be pretty-printed. (default: no) renderFormatted : no # How parameters should be represented. One of INDEXED, NAMED, or INLINE. (default: INDEXED) paramType : INDEXED # How statements should be generated; one of PREPARED_STATEMENT or STATIC_STATEMENT. (default: PREPARED_STATEMENT) statementType : PREPARED_STATEMENT # Whether internal jOOQ logging should be enabled. (default: no) executeLogging : no # Whether optimistic locking should be enabled. (default: no) executeWithOptimisticLocking : no # Whether returned records should be attached to the jOOQ context. (default: yes) attachRecords : yes # Whether primary-key fields should be updatable. (default: no) updatablePrimaryKeys : no Support Please file bug reports and feature requests in GitHub issues . License Copyright 2014-2019 Benjamin Bader This library is licensed under the Apache License, Version 2.0. See http://www.apache.org/licenses/LICENSE-2.0.html or the LICENSE file in this repository for the full license text.","title":"jOOQ"},{"location":"jooq/#dropwizard-jooq-bundle","text":"An addon bundle in the vein of dropwizard-hibernate for using the excellent jOOQ SQL library in Dropwizard applications.","title":"Dropwizard jOOQ Bundle"},{"location":"jooq/#dependency-info","text":"dependency groupId com.bendb.dropwizard /groupId artifactId dropwizard-jooq /artifactId version 1.3.5-1 /version /dependency","title":"Dependency Info"},{"location":"jooq/#usage","text":"Add a JooqBundle to your Application class. @Override public void initialize ( Bootstrap MyConfiguration bootstrap ) { // ... bootstrap . addBundle ( new JooqBundle AppConfig () { @Override public DataSourceFactory getDataSourceFactory ( AppConfig configuration ) { return configuration . getDataSourceFactory (); } @Override public JooqFactory getJooqFactory ( AppConfig configuration ) { return configuration . getJooqFactory (); } }); } This will enable @Context injection of jOOQ Configuration and DSLContext parameters in resource methods: @GET @Path ( /posts/{id} ) public BlogPost getPost ( @QueryParam ( id ) int postId , @Context DSLContext database ) { BlogPostRecord post = database . selectFrom ( POST ) . where ( POST . ID . equal ( postId )) . fetchOne (); // do stuff } This will also enable database healthchecks and install exception mappers. Finally, because I 3 postgres and jOOQ can lag behind some of its features, PostgresSupport provides a few helpers for aggregating array values in queries. For example (taken from the sample project): import static com.bendb.dropwizard.jooq.PostgresSupport.arrayAgg ; database . select ( BLOG_POST . ID , BLOG_POST . BODY , BLOG_POST . CREATED_AT , arrayAgg ( POST_TAG . TAG_NAME )) . from ( BLOG_POST ) . leftOuterJoin ( POST_TAG ) . on ( BLOG_POST . ID . equal ( POST_TAG . POST_ID )) . where ( BLOG_POST . ID . equal ( id . get ())) . groupBy ( BLOG_POST . ID , BLOG_POST . BODY , BLOG_POST . CREATED_AT ) . fetchOne ();","title":"Usage"},{"location":"jooq/#code-generation","text":"dropwizard-jooq provides some classes for making generated pojos, DAOs, etc. more convenient to use. JodaDateTimeConverter can be used to map between java.sql.Timestamp and Joda DateTime objects. This is currently the only converter bundled; contributions in this area are welcome!","title":"Code Generation"},{"location":"jooq/#configuration","text":"dropwizard-jooq uses the same DataSourceFactory for configuring its DataSource . For modifying jOOQ configuration settings, there is JooqFactory : jooq : # The flavor of SQL to generate. If not specified, it will be inferred from the JDBC connection URL. (default: null) dialect : POSTGRES # DEPRECATED: Use `executeLogging` instead (default: no) logExecutedSql : yes # Whether to include schema names in generated SQL. (default: yes) renderSchema : yes # How names should be rendered in generated SQL. One of QUOTED, AS_IS, LOWER, or UPPER. (default: QUOTED) renderNameStyle : QUOTED # How keywords should be rendered in generated SQL. One of LOWER, UPPER. (default: UPPER) renderKeywordStyle : LOWER # Whether generated SQL should be pretty-printed. (default: no) renderFormatted : no # How parameters should be represented. One of INDEXED, NAMED, or INLINE. (default: INDEXED) paramType : INDEXED # How statements should be generated; one of PREPARED_STATEMENT or STATIC_STATEMENT. (default: PREPARED_STATEMENT) statementType : PREPARED_STATEMENT # Whether internal jOOQ logging should be enabled. (default: no) executeLogging : no # Whether optimistic locking should be enabled. (default: no) executeWithOptimisticLocking : no # Whether returned records should be attached to the jOOQ context. (default: yes) attachRecords : yes # Whether primary-key fields should be updatable. (default: no) updatablePrimaryKeys : no","title":"Configuration"},{"location":"jooq/#support","text":"Please file bug reports and feature requests in GitHub issues .","title":"Support"},{"location":"jooq/#license","text":"Copyright 2014-2019 Benjamin Bader This library is licensed under the Apache License, Version 2.0. See http://www.apache.org/licenses/LICENSE-2.0.html or the LICENSE file in this repository for the full license text.","title":"License"},{"location":"redis/","text":"Dropwizard Redis Bundle An addon bundle for using the excellent Jedis redis client in Dropwizard applications. Dependency Info dependency groupId com.bendb.dropwizard /groupId artifactId dropwizard-redis /artifactId version 1.3.5-1 /version /dependency Usage Add a JedisFactory class: @NotNull @JsonProperty private JedisFactory redis ; public JedisFactory getJedisFactory () { return redis ; } public void setJedisFactory ( JedisFactory jedisFactory ) { this . redis = jedisFactory ; } Add a JedisBundle classL @Override public void initialize ( Bootstrap MyConfiguration bootstrap ) { // ... bootstrap . addBundle ( new JedisBundle AppConfig () { @Override public JedisFactory getJedisFactory ( AppConfig configuration ) { return configuration . getJedisFactory (); } }); } This will enable @Context injection of pooled Jedis and JedisPool in resource methods: @GET @Path ( /posts/{id} ) public BlogPost getPost ( @QueryParam ( id ) int postId , @Context Jedis jedis ) { String cachedBlogContent = jedis . get ( post- + postId ); // do stuff // No need to close the connection, it happens automatically. } This will also enable redis health-checking. Configuration For configuration the redis connection, there is JedisFactory : redis : # The redis server s address; required. endpoint : localhost:6379 # Auth password for redis server connection. (default: null) password : null # The minimum number of idle connections to maintain in the pool. (default: 0) minIdle : 0 # The maximum number of idle connections allowed in the pool. (default: 0) maxIdle : 0 # The maximum number of connections allowed in the pool. (default: 1024) maxTotal : 1924 # Enables SSL connection. (default: false) ssl : false # The configured timeout (in milliseconds) for redis connections in the connection pool. (default: 2000) timeout : 2000 Support Please file bug reports and feature requests in GitHub issues . License Copyright 2014-2019 Benjamin Bader This library is licensed under the Apache License, Version 2.0. See http://www.apache.org/licenses/LICENSE-2.0.html or the LICENSE file in this repository for the full license text.","title":"Redis"},{"location":"redis/#dropwizard-redis-bundle","text":"An addon bundle for using the excellent Jedis redis client in Dropwizard applications.","title":"Dropwizard Redis Bundle"},{"location":"redis/#dependency-info","text":"dependency groupId com.bendb.dropwizard /groupId artifactId dropwizard-redis /artifactId version 1.3.5-1 /version /dependency","title":"Dependency Info"},{"location":"redis/#usage","text":"Add a JedisFactory class: @NotNull @JsonProperty private JedisFactory redis ; public JedisFactory getJedisFactory () { return redis ; } public void setJedisFactory ( JedisFactory jedisFactory ) { this . redis = jedisFactory ; } Add a JedisBundle classL @Override public void initialize ( Bootstrap MyConfiguration bootstrap ) { // ... bootstrap . addBundle ( new JedisBundle AppConfig () { @Override public JedisFactory getJedisFactory ( AppConfig configuration ) { return configuration . getJedisFactory (); } }); } This will enable @Context injection of pooled Jedis and JedisPool in resource methods: @GET @Path ( /posts/{id} ) public BlogPost getPost ( @QueryParam ( id ) int postId , @Context Jedis jedis ) { String cachedBlogContent = jedis . get ( post- + postId ); // do stuff // No need to close the connection, it happens automatically. } This will also enable redis health-checking.","title":"Usage"},{"location":"redis/#configuration","text":"For configuration the redis connection, there is JedisFactory : redis : # The redis server s address; required. endpoint : localhost:6379 # Auth password for redis server connection. (default: null) password : null # The minimum number of idle connections to maintain in the pool. (default: 0) minIdle : 0 # The maximum number of idle connections allowed in the pool. (default: 0) maxIdle : 0 # The maximum number of connections allowed in the pool. (default: 1024) maxTotal : 1924 # Enables SSL connection. (default: false) ssl : false # The configured timeout (in milliseconds) for redis connections in the connection pool. (default: 2000) timeout : 2000","title":"Configuration"},{"location":"redis/#support","text":"Please file bug reports and feature requests in GitHub issues .","title":"Support"},{"location":"redis/#license","text":"Copyright 2014-2019 Benjamin Bader This library is licensed under the Apache License, Version 2.0. See http://www.apache.org/licenses/LICENSE-2.0.html or the LICENSE file in this repository for the full license text.","title":"License"}]}